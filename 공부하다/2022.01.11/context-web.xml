<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 
		spring webmvc 관련 어노테이션을 감지하고, 적절한 처리를 수행한 객체가 스프링 컨테이너에 등록된다. 
	 -->
	<mvc:annotation-driven />
	<!-- 
		컨트롤러의 요청 핸들러 메소드가 반환하는 뷰페이지 경로 앞에 "/WEB-INF/jsp/"를 추가한다. 
	 -->
	<mvc:view-resolvers>
		<mvc:jsp prefix="/WEB-INF/jsp/" suffix=""/>
	</mvc:view-resolvers>
	
	<!-- 
		사용자 정의 HandlerMathodArgementResolver빈을 등록한다.
	 -->
	<mvc:annotation-driven>	
		<mvc:argument-resolvers>
			<bean class="com.sample.argumentResolver.LoginedUserArgumentResolver"></bean>
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	<!-- 
		사용자 정의 MethodInterceptor를 설정한다
		사용자 정의 MethodInterceptor를 빈으로 등록한다.
	 -->
	 <!-- 웹페이지 요청에 대한 로그인체크를 담당하는 인터셉터 -->
	 <mvc:interceptors>
		<mvc:interceptor>
				<mvc:mapping path="/**/*.do"/>
				<mvc:exclude-mapping path="/rest/**/*.do"/>
				<bean class="com.sample.interceptor.LoginCheckInterceptor"></bean>
			</mvc:interceptor>
			<!-- ajax요청에 대한 로그인 체크를 담당하는 인터셉터로 rest에 대해서는 맡아서 진행한다.  -->
		<mvc:interceptor>
			<mvc:mapping path="/rest/**/*.do"/>
			<bean class="com.sample.interceptor.RestLoginCheckInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 
		@Controller, @RestController 어노테이션이 부착된 클래스를 스캔해서 스프링의 빈으로 등록시킨다
	 -->
	 <!-- 이렇게 설정할 수 있지만 다르게 설정가능하다.
		<context:component-scan base-package="com.sample.controller"></context:component-scan>
		<context:component-scan base-package="com.sample.restcontroller"></context:component-scan>
		<context:component-scan base-package="com.sample.exceptionhandler"></context:component-scan>
	 -->
	 <context:component-scan base-package="com.sample">
	 	<!-- 스캔대상에 포함시키는 어노테이션 -->
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		<!-- 스캔대상에서 제외시키는 어노테이션 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	 </context:component-scan>
	<!-- 
		첨부파일 업로드 요청(Multipart 요청)을 처리하는 MultipartResolver 인터페이스의 구현객체를 스프링의 컨테이너 빈으로 등록시킨다.
	 -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<property name="defaultEncoding" value="UTF-8"></property>
	 </bean>
	
</beans>
