요구사항
- 학생정보, 성적정보를 조회할 수 있다.
- 신규 학생정보, 성적정보를 입력할 수 있다.
- 등록된 학생의 성적정보를 수정할 수 있다.
- 등록된 학생정보, 성적정보를 삭제할 수 있다.
- 프로그램을 종료할 수 있다.

개발하기
1. 프로그램의 대상이 되는 데이터 표현하기
	- 프로그램의 대상이 되는 데이터는 무엇인가?
		학생정보, 성적정보
	- 프로그램의 대상이 되는 데이터를 표현하는 클래스를 정의한다.
		Student, ScoreDeatil
	- 클래스들 간의 관계는 무엇인가?
		Student has a ScoreDetail
2. 프로그램 설계하기
	- 학생정보는 어디에 저장하는가?
		Student[] students = new Student[100]
		* 여러 개으 학생정보를 관리해야 함으로 배열객체를 생성한다.
		* 학생정보는 students 배열에 0번째 부터 순서대로 저장한다.
	- 학생정보의 저장위치는 어떻게 관리하는가?
		int position = 0;
		* 배열에서 신규 학생정보의 저장위치를 position 변수에 유지하고,
                  학생정보를 저장하고 나면 position의 값을 1증가시켜서 배열의 다음 칸에 저장되도록한다. 
	- 학생정보의 조회/입력/수정/삭제 및 프로그램 종료기능은 어떻게 구현하는가?
		Scanner scan = new Scanner(System.in)
		* 각각의 기능을 메뉴로 화면에 출력시키고, Scanner객체를 이용해서 실행할 기능에 대한 메뉴번호를 입력받는다.
		* if ~ else if ~ else if 문을 사용해서 각각의 메뉴번호에 해당하는 기능들을 구분해서 구현한다.
3. 세부기능 구현하기
	- 조회기능
		* students배열에 저장된 모든 학생정보와 성적정보를 출력한다.
		* 향상된 for문을 사용해서 students배열에 저장된 Student객체의 주소값을 순서대로 전달받아서
                  해당 주소값이 참조하는 Student객체의 학생정보와 성적정보를 출려가는 기능을 반복 수행한다.
		* 만약, students 배열에서 조회된 주소값이 null이면 더이상 저장된 학생정보가 없는 것으로 보고 반복을 중단한다.
	- 입력기능
		* 학년, 이름, 국어, 영어, 수학점수를 입력받는다.
		* Student객체와 ScoreDetail 객체를 생성해서 각각 학생정보, 성적정보를 입력하고, ScoreDetail객체를 Student에 연결한다.
		* 학생정보를 students[position]에 저장한다. position은 학생정보를 저장할 위치를 나타내는 변수다.
		* position의 값을 1증가시켜서 다음 저장위치를 지정한다.
	- 수정기능
		* 수정할 성적정보를 포함하고 있는 학생의 학번, 수정할 과목명, 수정할 점수를 입력받는다.
		* 입력된 학번에 해당하는 학생정보를 조회한다.
		* 학생정보가 존재하면 해당과목의 점수를 수정하고, 학생정보가 존재하지 않으면 오류 메세지를 화면에 표시한다.
	- 삭제기능
		* 삭제할 학생정보에 대한 학번을 입력받는다.
		* 입력된 학번에 해당하는 학생정보가 배열의 몇 번째에 저장되어 있는지 조회한다.
		* 삭제할 학생번호가 저장된 칸에 배열의 맨 마지막번째 학생정보를 저장하고, 배열의 맨 마지막번째 칸의 값을 null로 변경한다.
		* 신규 학생정보의 저장위치를 가지고 있는 position값을 1감소시킨다.
	- 종료기능
		* break문을 실행시켜서 while문을 탈출한다.
		

