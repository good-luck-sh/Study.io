package example_09_07_method;

public class Sample3App {

	public static void main(String[] args) {
		//참조변수 sample에 sample3의 주소값을 연결함
		// 메소드 중복정의 된 객체생성하기 
		Sample3 sample = new Sample3();
		
		//메소드 실행시 매개변수가 서로 다른 메소드 실행해보기 
		
		int value1 = sample.plus(10, 20);//JVM이 골라서 사용된다는 것을 확인할 수 있음
		System.out.println(value1);
		
		double value2 = sample.plus(1.0,10);//사용자가 고르지않아도, JVM에서 호출해서 사용된다는 것을 확인할 수 있음
		System.out.println(value2);
		
		//일관된 이름으로 사용하고 싶은것. 그것이 목적으로 사용됨
		//실제업무에서는 중복정의는 여러종류의 수를 생각해서 작성해야함.
		//출판사, 제목으로 찾는것, 지은이로 찾는 것 여러가지를 확인해서 작성할 수 있음
		//기능을 확인한 후 반환타입을 확인해서 참조변수의 데이터타입을 작성할 수 있음
		
		int value3 = sample.plus(10, 20, 30);
		System.out.println(value3);
		
		long value4 = sample.plus(7857694837859L, 4567835748451546454L);
		System.out.println(value4);
		
		//중복정의만 실행해놓으면 JVM에서 호출해줌.
		//목적 : 유사한 기능은 일관된 이름으로 사용하자, 통일성있게
		// 결론 
		// 메소드 실행시 전달한 값과 동일한 매개변수(타입/갯수)를 갖고있는 메소드가 실행됨
		// 다양한 덧셈 기능을 하나의 일관된 이름으로 실행함 
		// 비슷한 기능을 하나의 일관된 이름으로 사용하기 때문에 코드의 가독성과 사용성이 높아진다.
	}
}
