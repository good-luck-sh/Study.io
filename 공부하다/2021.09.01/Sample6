package example_08_31_operator;

public class Sample8 {
	public static void main(String[] args) {
		//논리연산자 
		// && || !
		//논리 연산자의 연산결과는 언제나 boolean값이다. 
		//논리 연산에 참여하는 값은 boolean타입의 값이거나, 혹은 연산결과가 boolean값이 연산식만 가능하다. 
		//결과가 boolean이거나 참여하는 값이 boolean타입의 값이여야한다. 
		
		
		//String name = "홍길동";
		//System.out.println((!name)); //오류 이런값은 불가능하다.
		
		//&&연산자는 좌항의 값이 false면 우항의 값을 확인하지 않고 논리식의 연산결과를 false로 판정한다 .
		//||연산자는 좌항의 값이 true면 우항의 값을 확인하지 않고 논리식의 연산결과를 true로 판정한다. 
		//따라서 아래와 같은 코드는 잘못된 코드다. 
		/*
		 * boolean result = a > b || x > ++y;(좌항에 있으면 상관없다.)
		 * int num = z + y;
		 * a > b의 연산결과가 true인  경우 y값을 1증가시키는 동작이 실행되지않는다. 
		 * a > b의 연산결과가 false인 경우에만 y값이 1증가된다. 
		 * 왜냐하면 true의 경우 좌항의 값만 확인하고 우항의 값을 확인하지 않기 때문이다. 
		 * 따라서 , num 의 결과는 논리식에서 a>b의 연산결과에 따라서 다른 값이 산출될 수 있다. 
		 * 증감연산자와 다른 연산자를 조합해서 수행문을 작성하지 않는다는 사실을 생각해야한다. 
		 * 즉, 위의 코드는 아래와 같이 변경해야 한다. 
		 * 
		 * ++y;
		 * boolean result = a> b || x>y;
		 * int num = z+y;
		 * 
		 */
		
		
		//앤퍼샌트,논 리곱(&&)-->둘 중에 두개 모두 참이여야지 참
		System.out.println(true && true);
		System.out.println(true && false);
		System.out.println(false && false);
		
		//파이프, 논리합 (||)--> 둘 중에 하나라도 참이면 참
		System.out.println(true || true);
		System.out.println(true || false);
		System.out.println(false || false);
		
		//논리 부정
		System.out.println(!true);
		System.out.println(!false);
		
		
	}
}
