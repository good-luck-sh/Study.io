<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sample.dao.BookDao">
	<!-- 
		<resultMap>은 select 문으로 조회된 데이터의 컬럼명과 resultType에서 지정한 클래스의 프로퍼티명이 서로 다를 때, 
		컬럼과 프로퍼티를 매핑시킨다.
		
		<id />태그에는 primary key에 해당하는 컬럼을 정의한다. 
		조회결과를 담기 위해서 <resultMap />을 사용할 때는 반드시 <resultMap />에서 매핑하는 컬럼이 조회결과에 모두 포함되어 있어야 한다. 
		select를 현재 column이 10개니까 10개 할 때만 사용할 수 있다.
		resultMap은 그렇게 많이 사용되지 않는다
		
		<select /> 태그에서 정의된 resultMap을 사용하기 
		<select id="searchBooks" parameterType="com.sample.form.Criteria" resultMap="BookResultMap">
		<select id="getAllBooks" resultMap ="BookResultMap">
			selct * 
			from sample_spring_books
		</select> 
		+ mybatis는 정의된 BookResultMap을 참조해서 type에 명시된 com.sample.vo.Book객체를 생성한다. 
		+ mybatis는 조회결과의 컬럼이름과 Book객체의 멤버변수에 저장해야할지를 <result />태그의 정보를 참조한다. 
	 -->
	<resultMap id="BookResultMap" type="com.sample.vo.Book" >
		<!-- primarykey는 id라고 적는다.  -->
		<id column="book_no" property="no"/>
		<result column="book_title" property="title"/>
		<result column="book_author" property="author"/>
		<result column="book_publisher" property="publisher"/>
		<result column="book_price" property="price"/>
		<result column="book_discount_price" property="discountPrice"/>
		<result column="book_pub_date" property="pubDate"/>
		<result column="book_stock" property="stock"/>
		<result column="book_updated_date" property="updatedDate"/>
		<result column="book_created_date" property="createdDate"/>
	</resultMap>
	<!-- 
		mapper파일
	 -->
	 <!-- 
	 	void insertBook(Book book); 메소드와 mapping되는 SQL구문 정의
	  -->
	 <insert id="insertBook" parameterType="com.sample.vo.Book">
	 <!-- <selectKey />
	 		 + 지금 테이블에 저장되는 데이터에 대한 기본키 값을 획득하기 위한 용도로 사용되는 태그다.
	 		 + 지금 테이블에 저장되는 데이터의 기본키 값이 다른 데이터를 추가할 때 필요한 경우, <selectKey />태그를 사용해서 
	 		   기본키 값을 획득해서 parameterType에 지정된 객체의 프로퍼티에 저장한다. 
	 		   그러면, 해당 insert구문이 실행된 후에는 parameterType으로 전달했던 객체의 프로퍼티에 기본 키값이 저장되어 있고, 
	 		   객체에서 기본키값을 조회해서 다른 데이터를 저장할 때 사용할 수 있다. 
	 		   
	 		 + 사용 예시 
	 		 	public void insertBook(Book book, List<BookPicture> bookPictures) {
	 		 		//insert문 실행 전 Book[no=0, title="자바의 정석", author="홍길동" ..]
	 		 		bookDao.insert(book);	
	 		 		//insert문 실행 후 Book[no=345, title="자바의 정석", author="홍길동" ..]
	 		 		
	 		 		for(BookPicture bookPicture : bookPictures){
	 		 			//Book객체에서 기본키 값을 조회해서 BookPicture저장할 때 사용할 수 있다. 
	 		 			bookPicture.setBookNo(book.getNo());
	 		 			bookDao.insertBookPicture(bookPicture);
	 		 		}
	 		 		
	 		 	}
	 		 
	 		 
	 		   
	 	<selectKey /> 태그의 SQL구문의 아래의 INSERT쿼리가 실행되기 전에 먼저 실행된다. 
	 	시점을 order로 설정하는 것이다. 
	 	<selectKey /> 태그에서 시퀀스로부터 일련번호를 획득해서 Book객체의 no 프로퍼티에 저장한다. 
	 	아래의 INSERT SQL문에서는 Book객체의 no 프로퍼티에 저장된 값을 테이블에 추가하면된다. 
	  -->
	 	<selectKey keyProperty="no" resultType="int" order="BEFORE">
	 		select books_seq.nextval
	 		from dual
	 	</selectKey>
	 	<!--  위에서 <selectKey /> 작업을 진행했기 때문에 이제는 insert에는 no로 적으면 된다. -->
	 	insert into sample_spring_books
	 	(book_no, book_title, book_author, book_publisher, book_price, book_discount_price, book_pub_date, book_stock)
	 	values
	 	(#{no},#{title},#{author},#{publisher},#{price},#{discountPrice},#{pubDate},#{stock})
	 </insert>
	 <!--  
	 	void insertBookPicture(BookPicture bookPicture);
	 		parameterType:BookPicture
	 		resultType:없음
	  -->
	 <insert id="insertBookPicture" parameterType="com.sample.vo.BookPicture">
	 	insert into sample_spring_book_pictures
	 	(book_no, book_picture)
	 	values (#{bookNo},#{picture})
	 </insert>
	  <!--  
	 	List<BookPicture> getBookPicturesByBookNo(int bookNo);
	 		parameterType:int
	 		resultType:BookPicture
	  -->
	 <select id="getBookPicturesByBookNo" parameterType="int" resultType="com.sample.vo.BookPicture">
	 	select book_no as bookNo, 
	 	book_picture as picture
	 	from sample_spring_book_pictures
	 	where book_no = #{value}
	 
	 </select>
	 
	 <!-- 
	 	void updateBook(Book book);메소드와 매핑되는 SQL구문 정의
	  -->
	 <update id="updateBook" parameterType="com.sample.vo.Book">
	 	update sample_spring_books
	 	set 
	 		book_title = #{title},
	 		book_author = #{author},
	 		book_publisher = #{publisher},
	 		book_price = #{price},
	 		book_discount_price = #{discountPrice},
	 		book_stock = #{stock},
	 		book_updated_date = sysdate
	 	where
	 		book_no = #{no}
	 </update>
	 <!-- 
	 	List<Book> getAllBooks();메소드와 매핑되는 SQL구문정의
	  -->
	 <select id="getAllBooks" resultMap="BookResultMap">
	   		select 
		   		book_no as no,
		   		book_title as title,
		   		book_author as author,
		   		book_publisher as publisher,
		   		book_price as price,
		   		book_discount_price as discountPrice,
		   		book_pub_date as pubDate,
		   		book_stock as stock,
		   		book_updated_date as updatedDate,
		   		book_created_date as createdDate
	   		from 
	   			sample_spring_books
	   		order by
	   			book_no desc
	 </select>
	 <!-- 
	 	List<Book> searchBooksByTitle(String title);메소드와 매핑하는 SQL 구문정의
	  -->
	 <select id="searchBooksByTitle" parameterType="string" resultType="com.sample.vo.Book">
	 	select 
		   		book_no as no,
		   		book_title as title,
		   		book_author as author,
		   		book_publisher as publisher,
		   		book_price as price,
		   		book_discount_price as discountPrice,
		   		book_pub_date as pubDate,
		   		book_stock as stock,
		   		book_updated_date as updatedDate,
		   		book_created_date as createdDate
	   		from 
	   			sample_spring_books
	   		where 
	   			book_title like '%' || #{value} || '%'
	   		order by 
	   			book_no desc
	 </select>
	 <!-- 
	 	List<Book> searchBooksByPrice(@Param("minPrice") int minPrice,@Param("maxPrice") int maxPrice);
	 	위와 같은 메소드에 매핑되는 SQL구문 정의 
	 	
	 	+ 매퍼 인터페이스의 메소드의 매개변수가 2개 이상일 때 @Param()어노테이션을 이용해서 SQL에 전달하는 파라미터값의 이름을 지정할 수 있다. 
	 	+ @Param을 사용해서 파라미터 이름을 지정했을 때 SQL 구문을 정의하는 태그에서 parameterType 속성을 작성할 필요가 없다.
	  -->
	 <select id="searchBooksByPrice"  resultMap="BookResultMap">
	 select 
		   		book_no as no,
		   		book_title as title,
		   		book_author as author,
		   		book_publisher as publisher,
		   		book_price as price,
		   		book_discount_price as discountPrice,
		   		book_pub_date as pubDate,
		   		book_stock as stock,
		   		book_updated_date as updatedDate,
		   		book_created_date as createdDate
	   		from 
	   			sample_spring_books
	   		where 
	   			book_price >= #{minPrice} and book_price &lt;= #{maxPrice}
	   		order by 
	   			book_price asc
	 </select>
	 <select id="getBookByNo" parameterType="int" resultType="com.sample.vo.Book">
	  select 
		   		book_no as no,
		   		book_title as title,
		   		book_author as author,
		   		book_publisher as publisher,
		   		book_price as price,
		   		book_discount_price as discountPrice,
		   		book_pub_date as pubDate,
		   		book_stock as stock,
		   		book_updated_date as updatedDate,
		   		book_created_date as createdDate
	   		from 
	   			sample_spring_books
	   		where 
	   			book_no = #{value}
	 </select>
	 <delete id="deleteBook" parameterType="int">
	 	delete 
	 	from 
	 		sample_spring_books
	 	where
	 		book_no = #{value}
	 </delete>
	 <select id="getBookTotalRows" parameterType="com.sample.form.Criteria" resultType="int">
		select count(*)
		from sample_spring_books	
		<where>
			<if test="opt != null and value != null">
			 <!-- 다이나믹 쿼리, 반응형 쿼리  -->
			   	<choose>
			   		<when test="opt == '제목'">
			   			book_title like '%' || #{value} || '%'
			   		</when>
			   		<when test="opt == '저자'">
			   			book_author = #{value}
			   		</when>
			   		<when test="opt == '출판사'">
			   			book_publisher = #{value}
			   		</when>
			   		<when test="opt == '최소가격'">
			   			book_price >= to_number(#{value})
			   		</when>
			   		<when test="opt == '최대가격'">
			   			book_price &lt; = to_number(#{value})	<!-- < -->
			   		</when>
			   	</choose>
			  </if>
		  </where> 
		  <!-- 총 갯수에 대해서 다이나믹 쿼리를 짠다. -->
	 </select>
	 <!-- 
	 	List<Book> searchBooks(Criteria criteria); 메소드와 매핑되는 SQL 구문 정의
	 	
	 	<where태그>
	 		+<where> 태그안에 sql문이 포함되면 where 키워드로 변경된다. 
	 		+<where> 태그안에 sql문중에서 첫번쨰 sql문이 "and 컬럼명 = 값"의 형태면 and를 제거한다.  
	 		<where>
	 		</where>
	  -->
	  <select id="searchBooks" parameterType="com.sample.form.Criteria" resultMap="BookResultMap">
	  		select *
	  		from (
		  			select A.*, row_number() over(order by book_no desc) rn
		  			from sample_spring_books A
		  			<where>
			   		<if test="opt != null and value != null">
			   		<!-- 다이나믹 쿼리, 반응형 쿼리  -->
			   			<choose>
			   				<when test="opt == '제목'">
			   					book_title like '%' || #{value} || '%'
			   				</when>
			   				<when test="opt == '저자'">
			   					book_author = #{value}
			   				</when>
			   				<when test="opt == '출판사'">
			   					book_publisher = #{value}
			   				</when>
			   				<when test="opt == '최소가격'">
			   					book_price >= to_number(#{value})
			   				</when>
			   				<when test="opt == '최대가격'">
			   					book_price &lt; = to_number(#{value})	<!-- < -->
			   				</when>
			   			</choose>
			   		</if>
		   		</where>
	  		)
	   		where rn between #{beginIndex} and #{endIndex}
	   		<!-- Criteria에 beginIndex과 endIndex가 있어야한다. -->
	  </select>
</mapper>
